import {
  formatPercentDigit,
  formatTokenDigit,
  formatUsdPriceDigit,
  formatUsdDigit,
} from "../formatDigit";

test.each([
  [0.291, "$0.29"],
  [0.0221, "$0.02"],
  [5.2345, "$5.23"],
  [100.123, "$100"],
  [-0.123, "-$0.12"],
  [-123, "-$123"],
  [-23456, "-$23.5K"],
  [123456, "$123.5K"],
  [0.00001, "< $0.01"],
  [10.00001, "$10.00001"],
])("formatUsdDigit", (input, output) => {
  expect(formatUsdDigit(input)).toEqual(output);
});

test.each([
  [0.291, "$0.29"],
  [0.0221, "$0.022"],
  [5.2345, "$5.23"],
  [100.123, "$100"],
  [0.020345, "$0.02"],
  [0.02345, "$0.023"],
  [0.0007190352755550547, "$0.00071"],
  [0.00007190352755550547, "$0.000071"],
  [0.000007190352755550547, "$0.0000071"],
  [0.00157805, "$0.0015"],
  [0.000157805, "$0.00015"],
  [-0.123, "-$0.12"],
  [-23456, "-$23.5K"],
  [123456, "$123.5K"],
])("formatUsdPriceDigit", (input, output) => {
  expect(formatUsdPriceDigit(input)).toEqual(output);
});

test.each([
  [0.291, "0.29"],
  [0.0221, "0.02"],
  [5.2345, "5.23"],
  [100.123, "100.12"],
  [0.020345, "0.02"],
  [0.02345, "0.02"],
  [-0.123, "-0.12"],
  [-23456, "-23.5K"],
  [-1100.123, "-1.1K"],
  [123456, "123.5K"],
  [0.000023, "0.00002"],

  // exp notation
  // [input, output]
  [0.0000000009, "0.0₉9"],
  [0.00000000098718254, "0.0₉9871"],
  [0.000000000239012, "0.0₉239"],
  [0.0000000123, "0.0₇123"],
  [0.000000123, "0.0₆123"],
  [0.0000000000000123, "0.0₁₃123"],
])("formatTokenDigit", (input, output) => {
  expect(formatTokenDigit({ value: input, subscript: true })).toEqual(output);
});

test.each([
  [0.291, "0.29%"],
  [0.0221, "0.02%"],
  [5.2345, "5.23%"],
  [100.123, "100.12%"],
  [0.020345, "0.02%"],
  [0.02345, "0.02%"],
  [-0.123, "-0.12%"],
  [-23456, "-23K%"],
  [123456, "123K%"],
])("formatPercentDigit", (input, output) => {
  expect(formatPercentDigit(input)).toEqual(output);
});
